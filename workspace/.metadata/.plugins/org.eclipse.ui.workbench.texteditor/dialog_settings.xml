<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item value="&#x0D;&#x0A;public class Word_Count {&#x0D;&#x0A;&#x09;// Map function&#x0D;&#x0A;    public static class MyMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt;{&#x0D;&#x0A;         private Text word = new Text();&#x0D;&#x0A;         public void map(LongWritable key, Text value, Context context) &#x0D;&#x0A;                 throws IOException, InterruptedException {&#x0D;&#x0A;             // Splitting the line on spaces&#x0D;&#x0A;             String[] stringArr = value.toString().split(&quot;\\s+&quot;);&#x0D;&#x0A;             for (String str : stringArr) {&#x0D;&#x0A;                 word.set(str);&#x0D;&#x0A;                 context.write(word, new IntWritable(1));&#x0D;&#x0A;             }           &#x0D;&#x0A;         }&#x0D;&#x0A;    }&#x0D;&#x0A;    &#x0D;&#x0A;    // Reduce function&#x0D;&#x0A;    public static class MyReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt;{        &#x0D;&#x0A;        private IntWritable result = new IntWritable();&#x0D;&#x0A;        public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) &#x0D;&#x0A;                throws IOException, InterruptedException {&#x0D;&#x0A;          int sum = 0;&#x0D;&#x0A;          for (IntWritable val : values) {&#x0D;&#x0A;            sum += val.get();&#x0D;&#x0A;          }&#x0D;&#x0A;          result.set(sum);&#x0D;&#x0A;          context.write(key, result);&#x0D;&#x0A;        }&#x0D;&#x0A;    }&#x0D;&#x0A;    public static void main(String[] args)  throws Exception{&#x0D;&#x0A;        Configuration conf = new Configuration();&#x0D;&#x0A;&#x0D;&#x0A;        Job job = Job.getInstance(conf, &quot;WC&quot;);&#x0D;&#x0A;        job.setJarByClass(WordCount.class);&#x0D;&#x0A;        job.setMapperClass(MyMapper.class);    &#x0D;&#x0A;        job.setReducerClass(MyReducer.class);&#x0D;&#x0A;        job.setOutputKeyClass(Text.class);&#x0D;&#x0A;        job.setOutputValueClass(IntWritable.class);&#x0D;&#x0A;        FileInputFormat.addInputPath(job, new Path(args[0]));&#x0D;&#x0A;        FileOutputFormat.setOutputPath(job, new Path(args[1]));&#x0D;&#x0A;        System.exit(job.waitForCompletion(true) ? 0 : 1);&#x0D;&#x0A;    }&#x0D;&#x0A;}&#x0D;&#x0A;" key="selection"/>
		<list key="findhistory">
			<item value="&#x0D;&#x0A;public class Word_Count {&#x0D;&#x0A;&#x09;// Map function&#x0D;&#x0A;    public static class MyMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt;{&#x0D;&#x0A;         private Text word = new Text();&#x0D;&#x0A;         public void map(LongWritable key, Text value, Context context) &#x0D;&#x0A;                 throws IOException, InterruptedException {&#x0D;&#x0A;             // Splitting the line on spaces&#x0D;&#x0A;             String[] stringArr = value.toString().split(&quot;\\s+&quot;);&#x0D;&#x0A;             for (String str : stringArr) {&#x0D;&#x0A;                 word.set(str);&#x0D;&#x0A;                 context.write(word, new IntWritable(1));&#x0D;&#x0A;             }           &#x0D;&#x0A;         }&#x0D;&#x0A;    }&#x0D;&#x0A;    &#x0D;&#x0A;    // Reduce function&#x0D;&#x0A;    public static class MyReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt;{        &#x0D;&#x0A;        private IntWritable result = new IntWritable();&#x0D;&#x0A;        public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) &#x0D;&#x0A;                throws IOException, InterruptedException {&#x0D;&#x0A;          int sum = 0;&#x0D;&#x0A;          for (IntWritable val : values) {&#x0D;&#x0A;            sum += val.get();&#x0D;&#x0A;          }&#x0D;&#x0A;          result.set(sum);&#x0D;&#x0A;          context.write(key, result);&#x0D;&#x0A;        }&#x0D;&#x0A;    }&#x0D;&#x0A;    public static void main(String[] args)  throws Exception{&#x0D;&#x0A;        Configuration conf = new Configuration();&#x0D;&#x0A;&#x0D;&#x0A;        Job job = Job.getInstance(conf, &quot;WC&quot;);&#x0D;&#x0A;        job.setJarByClass(WordCount.class);&#x0D;&#x0A;        job.setMapperClass(MyMapper.class);    &#x0D;&#x0A;        job.setReducerClass(MyReducer.class);&#x0D;&#x0A;        job.setOutputKeyClass(Text.class);&#x0D;&#x0A;        job.setOutputValueClass(IntWritable.class);&#x0D;&#x0A;        FileInputFormat.addInputPath(job, new Path(args[0]));&#x0D;&#x0A;        FileOutputFormat.setOutputPath(job, new Path(args[1]));&#x0D;&#x0A;        System.exit(job.waitForCompletion(true) ? 0 : 1);&#x0D;&#x0A;    }&#x0D;&#x0A;}&#x0D;&#x0A;"/>
		</list>
	</section>
</section>
